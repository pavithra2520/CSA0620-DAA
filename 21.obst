#include <stdio.h>
#include <float.h>
float sum(float freq[], int i, int j) {
    float s = 0;
    for (int k = i; k <= j; k++)
        s += freq[k];
    return s;
}
float optimalSearchTree(int keys[], float freq[], int n) {
    float cost[n][n];
    for (int i = 0; i < n; i++)
        cost[i][i] = freq[i];
    for (int length = 2; length <= n; length++) {
        for (int i = 0; i <= n - length; i++) {
            int j = i + length - 1;
            cost[i][j] = FLT_MAX;
            for (int r = i; r <= j; r++) {
                float c = ((r > i) ? cost[i][r - 1] : 0) +
                          ((r < j) ? cost[r + 1][j] : 0) +
                          sum(freq, i, j);
                if (c < cost[i][j])
                    cost[i][j] = c;
            }
        }
    }
    return cost[0][n - 1];
}
int main() {
    int keys[] = {10,20,30,40};
    float freq[] = {0.1,0.2,0.4,0.3};
    int n = sizeof(keys) / sizeof(keys[0]);
    printf("Cost of Optimal BST is %.2f\n", optimalSearchTree(keys, freq, n));
    return 0;
}
